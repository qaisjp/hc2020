{"version":3,"sources":["../node_modules/peerjs/dist sync","components/Game/network/remote_peer.ts","components/Game/constants.ts","components/Game/network/listeners.ts","components/Game/network/peer_network.ts","components/Game/gui/textLabel.ts","components/Game/entities/player.ts","components/Game/entities/entity.ts","components/Game/levelManager.ts","components/Game/index.tsx","App.tsx","serviceWorker.ts","index.tsx","imgs/img.jpg"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","RemotePeer","dataConn","name","dataConnection","this","from","type","data","send","_","extend","event","fn","on","destroy","PeerJsEvents","PeerJsMsgType","handleOpen","console","log","_id","_signals","Const","dispatch","getAllPeers","peers","peer","connectToPeer","handleConnection","conn","handleData","call","handleClose","err","handleError","has","isUndefined","connectedPeers","Host","window","location","hostname","Protocol","protocol","PeersUrl","Signal","dispatchers","func","ctx","push","d","f","bind","PeerNetwork","level","_level","Peer","host","port","parseInt","path","_addEventListeners","listener","add","xmlhttp","XMLHttpRequest","url","onreadystatechange","readyState","status","reject","JSON","parse","responseText","open","each","v","connect","sendToPeer","x","localPlayer","y","destroyed","Listeners","TextLabel","game","text","parent","align","size","Phaser","GameObjects","BitmapText","Player","scene","isPlayer","jumpReleased","_prevFacing","_jumping","_grounded","_sprinting","_turning","_moving","cursors","_velocity","_accel","facing","RIGHT","_addAnimations","frames","input","keyboard","createCursorKeys","body","velocity","acceleration","setSize","width","height","left","isDown","setVelocityX","right","down","setVelocityY","up","active","direction","key","frame","moveSpeed","LEFT","physics","world","enable","existing","anims","Sprite","LevelManager","network","remotePlayers","_connectionStatusText","_entitiesGroup","_physics","blocksGroup","itemBlocksGroup","broadcastTimer","onunload","onbeforeunload","_disconnect","group","_createWorld","addListener","_onOpen","_onData","_onClose","setup","cameras","main","startFollow","time","addEvent","delay","callback","_broadcastPlayerUpdate","callbackScope","loop","_collisionLayer","getChildren","update","_updateEntities","broadcastToPeers","state","currentState","Math","round","toFixed","a","setText","delayedCall","visible","remotePlayer","find","player","_handleHello","_handlePlayerUpdate","_handleBlockBump","_handleItemBlockBump","children","iterate","block","touching","idx","getChildIndex","itemBlock","newPlayer","getAt","bump","MyScene","manager","load","image","logoImg","bitmapFont","Scene","Game","useEffect","addEventListener","scale","resize","innerWidth","innerHeight","config","AUTO","mode","Scale","NONE","default","arcade","debug","App","className","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab941c01.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1489;","import _ from \"lodash\";\nclass RemotePeer {\n  id: any;\n  dataConnection: any;\n  name: string;\n  constructor(id, dataConn, name = \"peer\") {\n    this.id = id;\n    this.dataConnection = dataConn;\n    this.name = name;\n  }\n\n  send(from, type, data) {\n    this.dataConnection.send(\n      _.extend(data, {\n        from: from,\n        type: type\n      })\n    );\n  }\n\n  on(event, fn) {\n    this.dataConnection.on(event, fn);\n  }\n\n  destroy() {\n    this.dataConnection.destroy();\n  }\n}\n\nexport default RemotePeer;\n","/**\n * networking constants\n */\nexport const PeerJsEvents = {\n  OPEN: \"open\",\n  CONNECTION: \"connection\",\n  DISCONNECTED: \"disconnected\",\n  CLOSE: \"close\",\n  DATA: \"data\",\n  ERROR: \"error\"\n};\nexport const PeerJsMsgType = {\n  HELLO: 0,\n  PLAYER_UPDATE: 1,\n  BLOCK_BUMP: 2,\n  ITEM_BLOCK_BUMP: 3\n};\nexport const NETWORK_STATUS_CLEAR_TIME = 5000;\nexport const GAME_FONT = \"plumber_bros\";\n","import * as Const from '../constants';\nimport _ from \"lodash\"\n\nexport function handleOpen(id) {\n    console.log(`Connected to PeerServer with id: ${id}`);\n    console.log(this)\n\n    // set our assigned id and call user listener\n    this._id = id;\n    this._signals[Const.PeerJsEvents.OPEN].dispatch(id);\n\n    // connect to all existing peers (for now..)\n    this.getAllPeers((peers) => {\n        for (var peer of peers) {\n            this.connectToPeer(peer);\n        }\n    });\n}\n\nexport function handleConnection(conn) {\n    console.log(`${conn.peer} connected to us`);\n\n    // begin listening to events for this connected peer\n    conn.on(Const.PeerJsEvents.DATA, (data) => handleData.call(this, data));\n    conn.on(Const.PeerJsEvents.CLOSE, () => handleClose.call(this, conn.peer));\n    conn.on(Const.PeerJsEvents.ERROR, (err) => handleError.call(this, err));\n\n    // call the user listener\n    if (_.has(this._signals, Const.PeerJsEvents.CONNECTION)) {\n        this._signals[Const.PeerJsEvents.CONNECTION].dispatch(conn.peer);\n    }\n}\n\nexport function handleError(err) {\n    console.log(err);\n}\n\nfunction handleData(data) {\n    var type = data.type;\n\n    if (!_.isUndefined(type)) {\n        this._signals[Const.PeerJsEvents.DATA].dispatch(type, data);\n    } else {\n        console.log(`Error: unrecognised message with type: ${type}`);\n    }\n}\n\nfunction handleClose(peer) {\n    if (_.has(this.connectedPeers, peer)) {\n        delete this.connectedPeers[peer];\n        this._signals[Const.PeerJsEvents.CLOSE].dispatch(peer);\n    }\n}\n\n","import RemotePeer from \"./remote_peer\";\nimport * as Listeners from \"./listeners\";\nimport * as Const from \"../constants\";\nimport Peer from \"peerjs\";\nimport _ from \"lodash\";\n\nconst Host = window.location.hostname;\nconst Port = '9000';\nconst Protocol = window.location.protocol;\nconst Path = \"/multi\";\nconst PeersUrl = `${Path}/peerjs/peers`;\n\ninterface SignalD {\n  func: Function,\n  ctx: any\n}\nclass Signal {\n  dispatchers : SignalD[] = []\n  constructor() {\n    this.dispatchers = []\n  }\n  add(func, ctx) {\n    this.dispatchers.push({\n      func,\n      ctx\n    })\n  }\n  dispatch(...data) {\n    for(const d of this.dispatchers){\n      const f = d.func.bind(d.ctx)\n      f(...data)\n    }\n  }\n}\n\nclass PeerNetwork {\n    peer: Peer;\n    _level: any;\n    connectedPeers: {};\n    _id: string;\n    _signals: {};\n  constructor(level) {\n    this.peer = new Peer({ host: Host, port: parseInt(Port), path: Path });\n\n    this._level = level;\n    this.connectedPeers = {};\n    this._id = \"\";\n    this._signals = {};\n    this._addEventListeners();\n  }\n\n  addListener(event, listener, ctx = null) {\n    this._signals[event] = new Signal();\n    this._signals[event].add(listener, ctx);\n  }\n\n  getAllPeers(fn, ctx = null) {\n    var xmlhttp = new XMLHttpRequest();\n    var url = `${Protocol}//${Host}:${Port}${PeersUrl}`;\n\n    xmlhttp.onreadystatechange = f => {\n      if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {\n        // get an array of peer id's excluding our own id\n        let peers = _.reject(JSON.parse(xmlhttp.responseText), peer => {\n          return peer === this._id;\n        });\n\n        // pass the array to our callback\n        fn.call(ctx, peers);\n      }\n    };\n\n    xmlhttp.open(\"GET\", url, true);\n    xmlhttp.send();\n  }\n\n  broadcastToPeers(type, data) {\n    _.each(this.connectedPeers, v => {\n      v.send(this._id, type, data);\n    });\n  }\n\n  sendToPeer(id, type, data) {\n    if (!_.has(this.connectedPeers, id)) {\n      console.log(`Error: not connected to peer ${id}`);\n      return;\n    }\n\n    this.connectedPeers[id].send(this._id, type, data);\n  }\n\n  connectToPeer(id) {\n    // create a new Peer and connect to them\n    if (!_.has(this.connectedPeers, id)) {\n      let dataConn = this.peer.connect(id);\n\n      console.log(`Connecting to peer: ${id}`);\n      this.connectedPeers[id] = new RemotePeer(id, dataConn);\n      this.connectedPeers[id].on(Const.PeerJsEvents.OPEN, f => {\n        this.sendToPeer(id, Const.PeerJsMsgType.HELLO, {\n          x: this._level.localPlayer.x,\n          y: this._level.localPlayer.y\n        });\n      });\n    }\n  }\n\n  destroy() {\n    if (!!this.peer && !this.peer.destroyed) {\n      this.peer.destroy();\n    }\n  }\n\n  _addEventListeners() {\n    this.peer.on(\"open\", id => Listeners.handleOpen.call(this, id));\n    this.peer.on(\"connection\", peer => Listeners.handleConnection.call(this, peer));\n    this.peer.on(\"error\", err => Listeners.handleError(err));\n  }\n}\n\nexport default PeerNetwork;\n","\nimport Phaser from \"phaser\"\nimport * as Const from \"../constants\"\n\nexport class TextLabel extends Phaser.GameObjects.BitmapText {\n    constructor(game, x, y, text, parent : any = null, fixedToCam = false, centerText = true,\n            align = 1, size = 8) {\n        super(game, x, y, Const.GAME_FONT, text, size);\n\n        if (parent) {\n            parent.add(this);\n        }\n\n        this.align = align;\n    }\n}\n","/*\n * ===========================================================================\n * File: player.js\n * Author: Anthony Del Ciotto\n * Desc: TODO\n * ===========================================================================\n */\n\nimport Entity from \"./entity\";\nimport * as Const from \"../constants\";\n\nlet PlayerStates = {\n  Idle: 0,\n  Walking: 1,\n  Jumping: 2,\n  Turning: 3,\n  Ducking: 4\n};\n\nclass Player extends Entity {\n  id: string;\n  jumpReleased: boolean;\n  _prevFacing: number;\n  _jumping: boolean;\n  _grounded: boolean;\n  _sprinting: boolean;\n  _turning: boolean;\n  _moving: never[];\n  cursors: Phaser.Types.Input.Keyboard.CursorKeys | undefined;\n  _velocity: any;\n  _accel: any;\n    isPlayer: boolean;\n  constructor(scene, x, y, id = \"local\", isPlayer = false) {\n    super(scene, x, y, \"playersheet\", 0, /** Const.PLAYER_ACCEL */ 1);\n    this.id = id;\n    this.isPlayer = isPlayer\n    // this.maxSpeed = Const.PLAYER_MAX_SPEED;\n    // this.currentState = PlayerStates.IDLE;\n    this.jumpReleased = true;\n    this.facing = Phaser.RIGHT;\n\n    this._prevFacing = this.facing;\n    this._jumping = false;\n    this._grounded = false;\n    this._sprinting = false;\n    this._turning = false;\n    this._moving = [];\n    this._addAnimations([{ name: \"walk\", frames: [1, 2, 3] }], 8, true);\n  }\n\n  setup(scene) {\n    super.setup(scene);\n    this.cursors = this.scene.input.keyboard.createCursorKeys();\n    if (this.body) {\n      const body = this.body as Phaser.Physics.Arcade.Body;\n      this._velocity = body.velocity;\n      this._accel = body.acceleration;\n    //   body.maxVelocity.set(10, 10 * 10);\n    //   body.drag.set(1, 0);\n      body.setSize(body.width - 2, body.height);\n    }\n  }\n\n  update() {\n    if (this.cursors && this.body && this.isPlayer) {\n      const body = this.body as Phaser.Physics.Arcade.Body;\n      if (this.cursors.left && this.cursors.left.isDown) {\n        body.setVelocityX(-200);\n      } else if (this.cursors.right && this.cursors.right.isDown) {\n        body.setVelocityX(200);\n      } else {\n        body.setVelocityX(0);\n      }\n\n      if (this.cursors.down && this.cursors.down.isDown) {\n        body.setVelocityY(200);\n      } else if (this.cursors.up && this.cursors.up.isDown) {\n        body.setVelocityY(-200);\n      } else {\n        body.setVelocityY(0);\n      }\n    }\n    // this._updateAnimations();\n    // this._grounded = this.body.onFloor() || this.body.touching.down;\n\n    // if (this._moving[Phaser.LEFT] ) {\n    //     this._accel.x = -this.moveSpeed;\n    // } else if (this._moving[Phaser.RIGHT]) {\n    //     this._accel.x = this.moveSpeed;\n    // } else {\n    //     // set back to idle state if we are completely still and on the ground\n    //     this._accel.x = 0;\n    //     if (this._velocity.x === 0 && this._grounded) {\n    //         this.currentState = PlayerStates.Idle;\n    //     }\n    // }\n\n    // // check if we are turning sharply\n    // if (this._grounded && !this._turning) {\n    //     if ( (this._velocity.x < -Const.PLAYER_MAX_SPEED*0.6 && this._accel.x > 0) ||\n    //          (this._velocity.x > Const.PLAYER_MAX_SPEED*0.6 && this._accel.x < 0) ) {\n    //         this._turning = true;\n    //         this.currentState = PlayerStates.Turning;\n    //     }\n    // }\n\n    // // if we are on the ground and moving at all set\n    // // the player state to walking. we need this as if we land from\n    // // a jump still moving horizontally it needs to look like player\n    // // is running to a halt.\n    // if (Math.abs(this._velocity.x) > 0 && this._grounded && !this._turning) {\n    //     this.currentState = PlayerStates.Walking;\n    // }\n\n    // // if we land on the ground while jumping, we are clearly\n    // // not jumping anymore\n    // if (this._grounded && this._jumping && !this._turning) {\n    //     this._jumping = false;\n    //     this.currentState = PlayerStates.Idle;\n    // }\n\n    // // perform variable jump height check\n    // if (this._jumping && this.jumpReleased) {\n    //     if (this._velocity.y < Const.PLAYER_JUMP_SPEED/4) {\n    //         this._velocity.y = Const.PLAYER_JUMP_SPEED/4;\n    //     }\n    // }\n\n    // // cap player fall speed\n    // this._velocity.y = Math.min(this._velocity.y, Const.PLAYER_MAX_FALL_SPEED);\n  }\n\n  jump() {\n    // if (this._grounded && !this._jumping && this.jumpReleased) {\n    //     // we have not released the key yet\n    //     this.jumpReleased = false;\n    //     // set the appropriate state\n    //     this._jumping = true;\n    //     this._turning = false;\n    //     this.currentState = PlayerStates.Jumping;\n    //     this._velocity.y = Const.PLAYER_JUMP_SPEED;\n    //     this.game.jumpSound.play();\n    // }\n  }\n\n  sprint(active) {\n    // if (!this._jumping && Math.abs(this._accel.x) > 0 && active) {\n    //     this.body.maxVelocity.x = Const.PLAYER_MAX_SPRINT_SPEED;\n    // } else if (!active) {\n    //     this.body.maxVelocity.x = this.maxSpeed;\n    // }\n    // this._sprinting = active;\n  }\n\n  move(direction, active) {\n    // this._turning = false;\n    // this._moving[direction] = active;\n    // // if we are currently jumping then don't change our\n    // // facing direction and don't play the walking animation\n    // if (!this._jumping) {\n    //     this.currentState = PlayerStates.Walking;\n    //     this.facing = direction;\n    // }\n  }\n\n  _updateAnimations() {\n    // flip the player in the correct facing direction and play\n    // the current state animation\n    // if (this.facing !== this._prevFacing) {\n    //     this.flip();\n    //     this._prevFacing = this.facing;\n    // }\n    // switch (this.currentState) {\n    //     case PlayerStates.Walking:\n    //         // set the walking / running animation based on the current x velocity\n    //         let currentAnim = this.animations.currentAnim;\n    //         let delay = Math.min(200, (Const.PLAYER_MAX_SPEED / (Math.abs(this._velocity.x) / 80)));\n    //         currentAnim.delay = delay;\n    //         this.animations.play('walk');\n    //         break;\n    //     case PlayerStates.Jumping:\n    //         this.frame = 5;\n    //         break;\n    //     case PlayerStates.Turning:\n    //         this.frame = 4;\n    //         break;\n    //     case PlayerStates.Idle: // jshint ignore:line\n    //     default:\n    //         this.frame = 0;\n    //         break;\n    // }\n  }\n}\n\nexport default Player;\n","import Phaser from \"phaser\"\n\nclass Entity extends Phaser.GameObjects.Sprite {\n    moveSpeed: number;\n    facing: number;\n        constructor(game, x, y, key, frame, moveSpeed = 0) {\n        super(game, x, y, key, frame);\n\n        this.moveSpeed = moveSpeed;\n        this.facing = Phaser.LEFT;\n    }\n\n    setup(scene : Phaser.Scene) {\n        // scene.physics.enable(this, Phaser.Physics.Arcade);\n        // this.anchor.set(0.5, 0.5);\n        scene.physics.world.enable(this);\n        scene.add.existing(this);\n    }\n\n    pause() {\n        // this.animations.currentAnim.paused = true;\n        // this.body.enable = false;\n    }\n\n    resume() {\n        // this.animations.currentAnim.paused = false;\n        // this.body.enable = true;\n    }\n\n    flip() {\n        var dir = (this.facing === Phaser.LEFT ? -1 : 1);\n        // this.scale.x = dir;\n    }\n\n    _addAnimations(anims, frameRate = 60, loop = false) {\n        // for (var i = 0, l = anims.length; i < l; ++i) {\n        //     let anim = anims[i];\n        //     // this.animations.add(anim.name, anim.frames, frameRate, loop);\n        // }\n    }\n}\n\nexport default Entity;","import PeerNetwork from \"./network/peer_network\";\nimport { TextLabel } from \"./gui/textLabel\";\nimport * as Const from \"./constants\";\nimport _ from \"lodash\";\nimport Player from \"./entities/player\";\n\nexport default class LevelManager {\n  network: any;\n  remotePlayers: any;\n  _connectionStatusText: any;\n  _entitiesGroup: any;\n  _physics: any;\n  localPlayer: any;\n  blocksGroup: any;\n  itemBlocksGroup: any;\n  game: Phaser.Game;\n  scene: Phaser.Scene;\n  broadcastTimer: Phaser.Time.TimerEvent | undefined;\n  constructor(game: Phaser.Game, scene: Phaser.Scene) {\n    this.game = game;\n    this.scene = scene;\n    this.network = null;\n    this.remotePlayers = null;\n\n    this._connectionStatusText = null;\n\n    // make sure to cleanup peerjs when window is closed\n    window.onunload = window.onbeforeunload = f => this._disconnect();\n    console.log(scene);\n    this._entitiesGroup = this.scene.add.group();\n    this._createWorld();\n  }\n\n  shutdown() {\n    this.remotePlayers.destroy();\n  }\n\n  _createWorld() {\n    this.network = new PeerNetwork(this);\n\n    this._connectionStatusText = new TextLabel(this.scene, 16, 16, \"connecting...\", null, true, false, 0);\n    this.scene.add.existing(this._connectionStatusText);\n    this.remotePlayers = this.scene.add.group();\n\n    this.network.addListener(Const.PeerJsEvents.OPEN, this._onOpen, this);\n    this.network.addListener(Const.PeerJsEvents.DATA, this._onData, this);\n    this.network.addListener(Const.PeerJsEvents.CLOSE, this._onClose, this);\n\n    this.localPlayer = new Player(this.scene, 32, 100, \"local\", true);\n    this.localPlayer.setup(this.scene);\n    this.scene.cameras.main.startFollow(this.localPlayer);\n    this._entitiesGroup.add(this.localPlayer);\n\n    // this._createMap();\n    // this._createMapObjects();\n\n    // testing broadcasting the player state at a slower interval\n    this.broadcastTimer = this.scene.time.addEvent({\n      delay: 20, // ms\n      callback: this._broadcastPlayerUpdate,\n      //args: [],\n      callbackScope: this,\n      loop: true\n    });\n  }\n  _createMap() {\n    throw new Error(\"Method not implemented.\");\n  }\n  _createMapObjects() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  _updateCollision() {\n    // super._updateCollision();\n    //this._physics.arcade.collide(this.localPlayer, this.remotePlayers,\n    //null, this._onPlayerCollision, this);\n    // this._physics.arcade.collide(this.remotePlayers, this._collisionLayer);\n  }\n  _collisionLayer(remotePlayers: any, _collisionLayer: any) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  _updateEntities() {\n    for (const e of this._entitiesGroup.getChildren()) {\n      e.update();\n    }\n    this._broadcastPlayerUpdate();\n  }\n\n  update() {\n    // this._updateCollision();\n    this._updateEntities();\n  }\n  _broadcastPlayerUpdate() {\n    var body = this.localPlayer.body;\n    // console.log(\"Broadcasting...\")\n    this.network.broadcastToPeers(Const.PeerJsMsgType.PLAYER_UPDATE, {\n      facing: this.localPlayer.facing,\n      state: this.localPlayer.currentState,\n      x: Math.round(this.localPlayer.x),\n      y: Math.round(this.localPlayer.y),\n      v: body.velocity.y.toFixed(2),\n      a: body.acceleration.x.toFixed(2)\n    });\n  }\n\n  _disconnect() {\n    this.network.destroy();\n  }\n\n  /**\n   * peer js event listeners\n   */\n  _onOpen(id) {\n    this._connectionStatusText.setText(`connected, id: ${id}`);\n    this.scene.time.delayedCall(Const.NETWORK_STATUS_CLEAR_TIME, f => (this._connectionStatusText.visible = false));\n  }\n\n  _onData(type, data) {\n    // console.log(this.remotePlayers)\n    // console.log(this.remotePlayers.children)\n    // console.log(\"received some data\")\n    // console.log(data)\n    var remotePlayer = _.find(this.remotePlayers.getChildren(), player => {\n      return player.id === data.from;\n    });\n    switch (type) {\n      case Const.PeerJsMsgType.HELLO:\n        this._handleHello(data);\n        break;\n      case Const.PeerJsMsgType.PLAYER_UPDATE:\n        this._handlePlayerUpdate(remotePlayer, data);\n        break;\n      case Const.PeerJsMsgType.BLOCK_BUMP:\n        this._handleBlockBump(data);\n        break;\n      case Const.PeerJsMsgType.ITEM_BLOCK_BUMP:\n        this._handleItemBlockBump(data);\n        break;\n    }\n  }\n\n  _onClose(peer) {\n    var remotePlayer = _.find(this.remotePlayers.getChildren(), player => {\n      return player.id === peer;\n    });\n\n    if (!_.isUndefined(remotePlayer)) {\n      this.remotePlayers.children.iterate(function(player) {\n        if(player.id === peer){\n          player.destroy();\n        }\n      });\n    }\n  }\n\n  /**\n   * level event listeners\n   */\n  _onBlockBump(player, block) {\n    // super._onBlockBump(player, block);\n\n    if (player.body.touching.up) {\n      this.network.broadcastToPeers(Const.PeerJsMsgType.BLOCK_BUMP, {\n        idx: this.blocksGroup.getChildIndex(block)\n      });\n    }\n  }\n\n  _onItemBlockBump(player, itemBlock) {\n    // super._onItemBlockBump(player, itemBlock);\n\n    if (player.body.touching.up) {\n      this.network.broadcastToPeers(Const.PeerJsMsgType.ITEM_BLOCK_BUMP, {\n        idx: this.itemBlocksGroup.getChildIndex(itemBlock)\n      });\n    }\n  }\n\n  /**\n   * msg handlers\n   */\n  _handleHello(data) {\n    console.log(`hello from: ${data.from}`);\n    this.network.connectToPeer(data.from);\n\n    this._connectionStatusText.visible = true;\n    this._connectionStatusText.setText(\"player joined\");\n\n    this.scene.time.delayedCall(Const.NETWORK_STATUS_CLEAR_TIME, f => (this._connectionStatusText.visible = false));\n    var newPlayer = new Player(this.scene, data.x, data.y, data.from);\n    newPlayer.setup(this.scene);\n    this.remotePlayers.add(newPlayer);\n    this._entitiesGroup.add(newPlayer);\n  }\n\n  _handlePlayerUpdate(remotePlayer, data) {\n    var body = remotePlayer.body;\n    remotePlayer.facing = data.facing;\n    remotePlayer.currentState = data.state;\n    remotePlayer.x = data.x;\n    remotePlayer.y = data.y;\n    body.velocity.y = data.v;\n    body.acceleration.x = data.a;\n  }\n\n  _handleBlockBump(data) {\n    this.blocksGroup.getAt(data.idx).bump();\n  }\n\n  _handleItemBlockBump(data) {\n    this.itemBlocksGroup.getAt(data.idx).bump();\n  }\n}\n","import React, { useRef, useEffect, useState } from \"react\";\nimport Phaser from \"phaser\";\nimport logoImg from \"../../imgs/img.jpg\";\nimport LevelManager from \"./levelManager\";\n\nclass MyScene extends Phaser.Scene {\n  manager: LevelManager | undefined;\n  constructor() {\n    super(\"MyScene\");\n  }\n  preload() {\n    this.load.image(\"logo\", logoImg);\n    this.load.bitmapFont(\"plumber_bros\", \"res/fonts/plumber_bros.png\", \"res/fonts/plumber_bros.xml\");\n  }\n\n  update() {\n    if (this.manager) {\n      this.manager.update();\n    }\n  }\n\n  create() {\n    // const logo = this.add.image(800, 600, \"logo\");\n    // this.tweens.add({\n    //   targets: logo,\n    //   y: 450,\n    //   duration: 2000,\n    //   ease: \"Power2\",\n    //   yoyo: true,\n    //   loop: -1\n    // });\n    this.manager = new LevelManager(this.game, this);\n  }\n}\n\nconst Game = () => {\n  useEffect(() => {\n    let game;\n\n    window.addEventListener(\"resize\", () => {\n      game.scale.resize(window.innerWidth, window.innerHeight);\n    });\n\n    const config = {\n      type: Phaser.AUTO,\n      parent: \"phaser-example\",\n      width: 1920,\n      height: 1080,\n      scene: MyScene,\n      scale: {\n        mode: Phaser.Scale.NONE\n      },\n      physics: {\n        default: \"arcade\",\n        arcade: {\n          debug: true\n        }\n      }\n    };\n\n    game = new Phaser.Game(config);\n\n    return () => {};\n  }, []);\n\n  return <div id=\"phaser-example\"></div>;\n};\n\nexport default Game;\n","import React from 'react';\nimport './theme.scss';\nimport { Game } from './components'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/img.a16fe9ef.jpg\";"],"sourceRoot":""}