{"version":3,"sources":["../node_modules/peerjs/dist sync","components/Game/network/remote_peer.ts","components/Game/constants.ts","components/Game/network/listeners.ts","components/Game/network/peer_network.ts","components/Game/gui/textLabel.ts","components/Game/entities/arena/wall.ts","components/Game/entities/arena/verticalDoor.ts","components/Game/entities/arena/horizontalDoor.ts","components/Game/entities/arena/index.ts","components/Game/entities/entity.ts","components/Game/entities/player.ts","components/Game/entities/spear.ts","components/Game/entities/monster.ts","components/Game/entities/laser.ts","components/Game/entities/ghost.ts","components/Game/levelManager.ts","components/Game/index.tsx","App.tsx","serviceWorker.ts","index.tsx","imgs/img.jpg","imgs/spear_gray.png","imgs/malware_gladiator.png","imgs/avast_logo_light.png"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","RemotePeer","dataConn","name","dataConnection","this","from","type","data","send","_","extend","event","fn","on","destroy","PeerJsEvents","PeerJsMsgType","handleOpen","setLeader","a","async","console","log","getAllPeers","peers","length","peer","connectToPeer","_id","_signals","Const","dispatch","handleConnection","conn","handleData","call","handleClose","err","handleError","has","isUndefined","connectedPeers","Host","window","location","hostname","Protocol","protocol","PeersUrl","Signal","dispatchers","func","ctx","push","d","f","bind","PeerNetwork","level","_level","peerMessageQueue","leader","Peer","host","port","parseInt","path","_addEventListeners","listener","add","xmlhttp","XMLHttpRequest","url","Promise","res","rej","onreadystatechange","readyState","status","reject","JSON","parse","responseText","open","each","v","connect","sendToPeer","x","localPlayer","y","m","destroyed","Listeners","TextLabel","game","text","parent","align","size","Phaser","GameObjects","BitmapText","Wall","scene","angle","group","existing","anims","Rectangle","Door","opened","top","bottom","cover","setOrigin","rotation","Math","PI","tweens","targets","Group","left","right","off","Arena","_blockGroup","doors","physics","staticGroup","wallunit","WallThickness","thick","b","wall","setup","left_door","VerticalDoor","right_door","top_door","HorizontalDoor","bottom_door","Entity","key","frame","world","enable","Physics","Arcade","Sprite","Player","isPlayer","createSpear","undefined","jumpReleased","_jumping","_grounded","_sprinting","_turning","_moving","cursors","_velocity","_accel","_clickDown","isNew","currentScale","hasSpear","currentAnimation","create","frames","frameRate","repeat","play","setSize","setScale","input","keyboard","addKeys","up","Input","Keyboard","KeyCodes","W","down","S","A","D","setCollideWorldBounds","body","velocity","acceleration","setDrag","setMaxSpeed","scale","cameras","main","shake","pointer","activePointer","directionRad","Angle","Between","scrollX","scrollY","isDown","direction","localXAcceleration","localYAcceleration","setAccelerationX","setAccelerationY","active","Spear","_angle","_initSpeed","_maxSpeed","_wallHit","_monstersHit","setDisplaySize","speed","setVelocity","cos","sin","abs","contains","setVelocityX","setVelocityY","setImmovable","setXY","position","Monster","isHit","createLaser","_rand","_numUpdates","_numRand","playingHit","RandomDataGenerator","time","delayedCall","width","height","Array","frac","rand","walk_rate","Laser","Ghost","uuidv4","require","WAVES","LevelManager","network","remotePlayers","_connectionStatusText","_introText","_titleSprite","_deadText","_startText","_instructionText","_malwareText","_entitiesGroup","_spearGroup","_laserGroup","_monsterGroup","_physics","staticObjects","blocksGroup","itemBlocksGroup","dead","broadcastTimer","ghost","gameStarted","spawning","canSpawn","arena","waveNumber","monster","closest","ID","closestDistance","Distance","getChildren","p","rotationRad","onunload","onbeforeunload","_disconnect","sprite","alpha","depth","centerOn","setTimeout","href","addListener","_onOpen","_onData","_onClose","spear","broadcastToPeers","round","startFollow","collider","laser","area","l","forEach","overlap","player","children","shutdown","onWallHit","s","mass","onHitMonster","_collisionLayer","update","_broadcastPlayerUpdate","_broadcastMonstersUpdate","wait","xOff","ceil","random","yOff","_updateEntities","nmbrMonsters","ds","createMonster","close","_createWorld","state","currentState","vx","toFixed","vy","monsters","map","numUpdates","numRand","setText","remotePlayer","find","_handleHello","_handlePlayerUpdate","_handleBlockBump","_handleItemBlockBump","_handleSpearCreated","_handleSyncSpears","_handleSpearPickedUp","_handleMonstersUpdate","_handlePlayerDead","_handleDeadMonster","_handleDoor","block","touching","idx","getChildIndex","itemBlock","visible","newPlayer","spears","getAt","bump","myMonsters","potentialMonster","catchUp","MyScene","manager","load","image","logoImg","spearImg","avastImg","malwareImg","bitmapFont","multiatlas","setBackgroundColor","Scene","Game","useEffect","innerWidth","addEventListener","resize","innerHeight","config","AUTO","mode","Scale","NONE","default","arcade","debug","fps","App","className","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.621b0d04.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1495;","import _ from \"lodash\";\nclass RemotePeer {\n  id: any;\n  dataConnection: any;\n  name: string;\n  constructor(id, dataConn, name = \"peer\") {\n    this.id = id;\n    this.dataConnection = dataConn;\n    this.name = name;\n  }\n\n  send(from, type, data) {\n    this.dataConnection.send(\n      _.extend(data, {\n        from: from,\n        type: type\n      })\n    );\n  }\n\n  on(event, fn) {\n    this.dataConnection.on(event, fn);\n  }\n\n  destroy() {\n    this.dataConnection.destroy();\n  }\n}\n\nexport default RemotePeer;\n","/**\n * networking constants\n */\nexport const PeerJsEvents = {\n  OPEN: \"open\",\n  CONNECTION: \"connection\",\n  DISCONNECTED: \"disconnected\",\n  CLOSE: \"close\",\n  DATA: \"data\",\n  ERROR: \"error\"\n};\nexport const PeerJsMsgType = {\n  HELLO: 0,\n  PLAYER_UPDATE: 1,\n  BLOCK_BUMP: 2,\n  ITEM_BLOCK_BUMP: 3,\n  SPEAR_CREATED: 4,\n  SYNC_SPEARS: 5,\n  SPEAR_PICKED_UP: 6,\n  MONSTERS_UPDATE: 7,\n  PLAYER_DEAD: 8,\n  DEAD_MONSTER: 9,\n  DOOR_OPEN: 10,\n  DOOR_CLOSE: 11\n};\nexport const NETWORK_STATUS_CLEAR_TIME = 5000;\nexport const GAME_FONT = \"plumber_bros\";\n","import * as Const from \"../constants\";\nimport _ from \"lodash\";\n\nexport async function handleOpen(id, setLeader) {\n  console.log(`Connected to PeerServer with id: ${id}`);\n  console.log(this);\n  // set our assigned id and call user listener\n  // connect to all existing peers (for now..)\n  const { peers } = await this.getAllPeers();\n  if (peers.length === 1) {\n    setLeader();\n  }\n  for (var peer of peers) {\n    if (peer !== id) {\n      this.connectToPeer(peer);\n    }\n  }\n\n  this._id = id;\n  this._signals[Const.PeerJsEvents.OPEN].dispatch(id);\n}\n\nexport function handleConnection(conn) {\n  console.log(`${conn.peer} connected to us`);\n\n  // begin listening to events for this connected peer\n  conn.on(Const.PeerJsEvents.DATA, data => handleData.call(this, data));\n  conn.on(Const.PeerJsEvents.CLOSE, () => handleClose.call(this, conn.peer));\n  conn.on(Const.PeerJsEvents.ERROR, err => handleError.call(this, err));\n\n  // call the user listener\n  if (_.has(this._signals, Const.PeerJsEvents.CONNECTION)) {\n    this._signals[Const.PeerJsEvents.CONNECTION].dispatch(conn.peer);\n  }\n}\n\nexport function handleError(err) {\n  console.log(err);\n}\n\nfunction handleData(data) {\n  var type = data.type;\n\n  if (!_.isUndefined(type)) {\n    this._signals[Const.PeerJsEvents.DATA].dispatch(type, data);\n  } else {\n    console.log(`Error: unrecognised message with type: ${type}`);\n  }\n}\n\nfunction handleClose(peer) {\n  if (_.has(this.connectedPeers, peer)) {\n    delete this.connectedPeers[peer];\n    this._signals[Const.PeerJsEvents.CLOSE].dispatch(peer);\n  }\n}\n","import RemotePeer from \"./remote_peer\";\nimport * as Listeners from \"./listeners\";\nimport * as Const from \"../constants\";\nimport Peer from \"peerjs\";\nimport _ from \"lodash\";\n\nconst Host = window.location.hostname;\nconst Port = \"9000\";\nconst Protocol = window.location.protocol;\nconst Path = \"/multi\";\nconst PeersUrl = `${Path}/peerjs/peers`;\n\ninterface SignalD {\n  func: Function;\n  ctx: any;\n}\nclass Signal {\n  dispatchers: SignalD[] = [];\n  constructor() {\n    this.dispatchers = [];\n  }\n  add(func, ctx) {\n    this.dispatchers.push({\n      func,\n      ctx\n    });\n  }\n  dispatch(...data) {\n    for (const d of this.dispatchers) {\n      const f = d.func.bind(d.ctx);\n      f(...data);\n    }\n  }\n}\n\nclass PeerNetwork {\n  peer: Peer;\n  _level: any;\n  connectedPeers: {};\n  peerMessageQueue: {};\n  _id: string;\n  _signals: {};\n  leader: boolean;\n  constructor(level) {\n    this.peer = new Peer({ host: Host, port: parseInt(Port), path: Path });\n\n    this._level = level;\n    this.connectedPeers = {};\n    this.peerMessageQueue = {}\n    this._id = \"\";\n    this._signals = {};\n    this.leader = false;\n    this._addEventListeners();\n  }\n\n  addListener(event, listener, ctx: any = null) {\n    this._signals[event] = new Signal();\n    this._signals[event].add(listener, ctx);\n  }\n\n  async getAllPeers(fn, ctx = null) {\n    var xmlhttp = new XMLHttpRequest();\n    var url = `${Protocol}//${Host}:${Port}${PeersUrl}`;\n    return new Promise((res, rej) => {\n      xmlhttp.onreadystatechange = f => {\n        if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {\n          // get an array of peer id's excluding our own id\n          let peers = _.reject(JSON.parse(xmlhttp.responseText), peer => {\n            return peer === this._id;\n          });\n          // pass the array to our callback\n          res({ctx, peers});\n        }\n      };\n\n      xmlhttp.open(\"GET\", url, true);\n      xmlhttp.send();\n    });\n  }\n\n  broadcastToPeers(type, data) {\n    _.each(this.connectedPeers, v => {\n      v.send(this._id, type, data);\n    });\n  }\n\n  sendToPeer(id, type, data) {\n    if (!_.has(this.connectedPeers, id)) {\n      console.log(`Error: not connected to peer ${id}`);\n      return;\n    }\n\n    this.connectedPeers[id].send(this._id, type, data);\n  }\n\n  connectToPeer(id) {\n    // create a new Peer and connect to them\n    if (!_.has(this.connectedPeers, id)) {\n      let dataConn = this.peer.connect(id);\n\n      console.log(`Connecting to peer: ${id}`);\n      this.connectedPeers[id] = new RemotePeer(id, dataConn);\n      this.connectedPeers[id].on(Const.PeerJsEvents.OPEN, f => {\n        this.sendToPeer(id, Const.PeerJsMsgType.HELLO, {\n          x: this._level.localPlayer.x,\n          y: this._level.localPlayer.y\n        });\n        if(this.peerMessageQueue[id]){\n          for(const m of this.peerMessageQueue[id]){\n            this.sendToPeer(id, m.type, m.data);\n          }\n        }\n      });\n    }\n  }\n\n  destroy() {\n    if (!!this.peer && !this.peer.destroyed) {\n      console.log(\"Destroying...\");\n      this.peer.destroy();\n    }\n  }\n\n  _addEventListeners() {\n    this.peer.on(\"open\", id =>\n      Listeners.handleOpen.call(this, id, () => {\n        this.leader = true;\n      })\n    );\n    this.peer.on(\"connection\", peer => Listeners.handleConnection.call(this, peer));\n    this.peer.on(\"error\", err => Listeners.handleError(err));\n  }\n}\n\nexport default PeerNetwork;\n","\nimport Phaser from \"phaser\"\nimport * as Const from \"../constants\"\n\nexport class TextLabel extends Phaser.GameObjects.BitmapText {\n    constructor(game, x, y, text, parent : any = null, fixedToCam = false, centerText = true,\n            align = 1, size = 8) {\n        super(game, x, y, Const.GAME_FONT, text, size);\n\n        if (parent) {\n            parent.add(this);\n        }\n\n        this.align = align;\n    }\n}\n","import Phaser from \"phaser\"\n\nexport const WallThickness = 10\n\nexport default class Wall extends Phaser.GameObjects.Rectangle {\n\n    constructor(scene, x, y, length, angle) {\n        if (angle !== 0) {\n            super(scene, x, y, length, WallThickness, 0x535353);\n        } else {\n            super(scene, x, y, WallThickness, length, 0x535353);\n        }\n    }\n\n    setup(scene : Phaser.Scene, group: Phaser.Physics.Arcade.StaticGroup) {\n        // scene.physics.world.enable(this);\n        // group.add(this)\n        scene.add.existing(this);\n    }\n\n    pause() {\n    }\n\n    resume() {\n    }\n\n    _addAnimations(anims, frameRate = 60, loop = false) {\n    }\n\n    update() {\n    }\n}","import Phaser from \"phaser\";\n\nexport default class Door extends Phaser.GameObjects.Group {\n  x: number;\n  y: number;\n  opened: boolean;\n  top: Phaser.GameObjects.Rectangle;\n  bottom: Phaser.GameObjects.Rectangle;\n  cover: Phaser.GameObjects.Rectangle;\n  type: string;\n  constructor(scene, x, y, type = \"left\") {\n    super(scene);\n    this.x = x;\n    this.y = y;\n    this.scene = scene;\n    this.opened = false;\n    let off = -5\n    if (type === \"left\")\n      off = 5\n\n    this.top = new Phaser.GameObjects.Rectangle(scene, this.x, this.y - 60, 10, 60, 0x535353);\n    this.top.setOrigin(0.5, 0.0);\n    this.bottom = new Phaser.GameObjects.Rectangle(scene, this.x, this.y + 60, 10, 60, 0x535353);\n    this.bottom.setOrigin(0.5, 1.0);\n    this.cover = new Phaser.GameObjects.Rectangle(scene, this.x, this.y, 10, 110, 0xffffff)\n    this.type = type;\n  }\n\n  setup(scene: Phaser.Scene) {\n    this.add(this.cover);\n    scene.add.existing(this.cover);\n    this.add(this.top);\n    scene.add.existing(this.top);\n    this.add(this.bottom);\n    scene.add.existing(this.bottom);\n  }\n  openImmediate() {\n    if (this.type === \"left\") {\n      this.bottom.rotation = Math.PI / 2;\n      this.top.rotation = -Math.PI / 2;\n    } else if (this.type === \"right\") {\n      this.bottom.rotation = -Math.PI / 2;\n      this.top.rotation = Math.PI / 2;\n    }\n    this.opened = true;\n  }\n\n  open() {\n    if (this.type === \"left\") {\n      this.scene.tweens.add({\n        targets: this.bottom,\n        rotation: Math.PI / 2\n      });\n      this.scene.tweens.add({\n        targets: this.top,\n        rotation: -Math.PI / 2\n      });\n    } else if (this.type === \"right\") {\n      this.scene.tweens.add({\n        targets: this.bottom,\n        rotation: -Math.PI / 2\n      });\n      this.scene.tweens.add({\n        targets: this.top,\n        rotation: Math.PI / 2\n      });\n    }\n    this.opened = true;\n  }\n\n  close() {\n    this.scene.tweens.add({\n      targets: this.top,\n      rotation: 0\n    });\n    this.scene.tweens.add({\n      targets: this.bottom,\n      rotation: 0\n    });\n    this.opened = false;\n  }\n\n  _addAnimations(anims, frameRate = 60, loop = false) {}\n}\n","import Phaser from \"phaser\";\n\nexport default class Door extends Phaser.GameObjects.Group {\n  x: number;\n  y: number;\n  opened: boolean;\n  left: Phaser.GameObjects.Rectangle;\n  right: Phaser.GameObjects.Rectangle;\n  cover: Phaser.GameObjects.Rectangle;\n  type: string;\n  constructor(scene, x, y, type = \"bottom\") {\n    super(scene);\n    this.x = x;\n    this.y = y;\n    this.scene = scene;\n    this.opened = false;\n\n    let off = -5\n    if (type === \"top\")\n      off = 5\n\n    this.left = new Phaser.GameObjects.Rectangle(scene, this.x - 60, this.y+off, 60, 10, 0x535353);\n    this.left.setOrigin(0, 0.5);\n    this.right = new Phaser.GameObjects.Rectangle(scene, this.x + 60, this.y+off, 60, 10, 0x535353);\n    this.right.setOrigin(1.0, 0.5);\n    this.cover = new Phaser.GameObjects.Rectangle(scene, this.x, this.y, 110, 10, 0xffffff)\n    this.type = type;\n  }\n\n  setup(scene: Phaser.Scene) {\n    this.add(this.cover);\n    scene.add.existing(this.cover);\n    this.add(this.left);\n    scene.add.existing(this.left);\n    this.add(this.right);\n    scene.add.existing(this.right);\n  }\n  openImmediate() {\n    this.opened = true;\n    if (this.type === \"bottom\") {\n      this.right.rotation = Math.PI / 2;\n      this.left.rotation = -Math.PI / 2;\n    } else if (this.type === \"top\") {\n      this.right.rotation = -Math.PI / 2;\n      this.left.rotation = Math.PI / 2;\n    }\n  }\n  open() {\n    this.opened = true;\n    if (this.type === \"top\") {\n      this.scene.tweens.add({\n        targets: this.right,\n        rotation: -Math.PI / 2\n      });\n      this.scene.tweens.add({\n        targets: this.left,\n        rotation: Math.PI / 2\n      });\n    } else if (this.type === \"bottom\") {\n      this.scene.tweens.add({\n        targets: this.right,\n        rotation: Math.PI / 2\n      });\n      this.scene.tweens.add({\n        targets: this.left,\n        rotation: -Math.PI / 2\n      });\n    }\n  }\n  close() {\n    this.opened = false;\n    this.scene.tweens.add({\n      targets: this.left,\n      rotation: 0\n    });\n    this.scene.tweens.add({\n      targets: this.right,\n      rotation: 0\n    });\n    this.opened = false;\n  }\n\n  resume() {}\n\n  _addAnimations(anims, frameRate = 60, loop = false) {}\n}\n","import Phaser from \"phaser\"\n\nimport Wall, {WallThickness} from './wall';\nimport VerticalDoor from './verticalDoor';\nimport HorizontalDoor from './horizontalDoor';\n\nexport default class Arena {\n    x: number;\n    y: number;\n    _blockGroup: Phaser.Physics.Arcade.StaticGroup;\n    doors: any[]\n    constructor(scene : Phaser.Scene, x: number, y: number) {\n        this.x = x;\n        this.y = y;\n        this._blockGroup = scene.physics.add.staticGroup();\n        this.doors = []\n    }\n\n    setup(scene : Phaser.Scene) {\n        const wallunit = 250;\n        const thick = WallThickness / 2;\n        const bits = [\n          { x: this.x, y: this.y, length: wallunit * 2, angle: 90 }, // bottom\n          { x: this.x + wallunit, y: this.y - wallunit / 2 + thick, length: wallunit, angle: 0 }, // bottom right\n          { x: this.x + wallunit * 1.5 - thick, y: this.y - wallunit + thick, length: wallunit, angle: 90 }, // right bottom\n          { x: this.x + wallunit * 2 - thick, y: this.y - wallunit * 2 + WallThickness, length: wallunit * 2, angle: 0 }, // right\n          { x: this.x + wallunit * 1.5, y: this.y - wallunit * 3 + WallThickness, length: wallunit, angle: 90 }, // right top\n          { x: this.x + wallunit, y: this.y - wallunit * 3.5 + WallThickness * 1.5, length: wallunit, angle: 0 }, // top right\n          { x: this.x, y: this.y - wallunit * 4 + thick * 4, length: wallunit * 2, angle: 90 }, // top\n          { x: this.x - wallunit, y: this.y - wallunit * 3.5 + WallThickness * 1.5, length: wallunit, angle: 0 }, // top left\n          { x: this.x - wallunit * 1.5, y: this.y - wallunit * 3 + WallThickness, length: wallunit, angle: 90 }, // left top\n          { x: this.x - wallunit * 2 + thick, y: this.y - wallunit * 2 + WallThickness, length: wallunit * 2, angle: 0 }, // left\n          { x: this.x - wallunit * 1.5 + thick, y: this.y - wallunit + thick, length: wallunit, angle: 90 }, // left bottom\n          { x: this.x - wallunit, y: this.y - wallunit / 2 + thick, length: wallunit, angle: 0 } // bottom left\n        ];\n\n        for (const b of bits) {\n            const wall = new Wall(scene, b.x, b.y, b.length, b.angle);\n            wall.setup(scene, this._blockGroup);\n            this._blockGroup.add(wall);\n        }\n        const left_door = new VerticalDoor(scene, this.x - wallunit * 2 + thick, this.y - wallunit * 2 + WallThickness, 'left');\n        left_door.setup(scene);\n        const right_door= new VerticalDoor(scene, this.x + wallunit * 2 - thick, this.y - wallunit * 2 + WallThickness, 'right');\n        right_door.setup(scene);\n        const top_door = new HorizontalDoor(scene, this.x, this.y - wallunit * 4 + thick * 4, 'top');\n        top_door.setup(scene);\n        const bottom_door= new HorizontalDoor(scene, this.x, this.y, 'bottom');\n        bottom_door.setup(scene);\n        this.doors.push(left_door, right_door, top_door, bottom_door)\n    }\n}","import Phaser from \"phaser\";\n\nclass Entity extends Phaser.Physics.Arcade.Sprite {\n  constructor(game, x, y, key, frame) {\n    super(game, x, y, key, frame);\n  }\n\n  setup(scene: Phaser.Scene) {\n    // scene.physics.enable(this, Phaser.Physics.Arcade);\n    // this.anchor.set(0.5, 0.5);\n    scene.physics.world.enable(this);\n    scene.add.existing(this);\n  }\n\n  pause() {\n    // this.animations.currentAnim.paused = true;\n    // this.body.enable = false;\n  }\n\n  resume() {\n    // this.animations.currentAnim.paused = false;\n    // this.body.enable = true;\n  }\n\n  flip() {\n    // this.scale.x = dir;\n  }\n\n  _addAnimations(anims, frameRate = 60, loop = false) {\n    // for (var i = 0, l = anims.length; i < l; ++i) {\n    //     let anim = anims[i];\n    //     // this.animations.add(anim.name, anim.frames, frameRate, loop);\n    // }\n  }\n}\n\nexport default Entity;\n","import Entity from \"./entity\";\nimport * as Const from \"../constants\";\nimport Spear from \"./spear\";\n\nlet PlayerStates = {\n  Idle: 0,\n  Walking: 1,\n  Jumping: 2,\n  Turning: 3,\n  Ducking: 4\n};\n\nconst SCALE = 0.2\n\nclass Player extends Entity {\n  id: string;\n  jumpReleased: boolean;\n  _jumping: boolean;\n  _grounded: boolean;\n  _sprinting: boolean;\n  _turning: boolean;\n  _moving: never[];\n  cursors: Phaser.Types.Input.Keyboard.CursorKeys | undefined;\n  _velocity: any;\n  _accel: any;\n  _clickDown: boolean;\n  isNew: boolean;\n  currentScale: number;\n  createSpear: Function | undefined;\n  isPlayer: boolean;\n  hasSpear: boolean;\n  currentAnimation: string;\n  constructor(scene, x, y, id = \"local\", isPlayer = false, createSpear: Function | undefined = undefined) {\n    super(scene, x, y, \"idle_spear\", 0);\n    this.scene.anims.create({\n      key: \"idle_spear\",\n      frames: [\n        { key: \"player\", frame: \"pixil-frame-0.png\" },\n        { key: \"player\", frame: \"pixil-frame-1.png\" }\n      ],\n      frameRate: 2,\n      repeat: -1\n    });\n    this.scene.anims.create({\n      key: \"walk_spear\",\n      frames: [\n        { key: \"player\", frame: \"pixil-frame-2.png\" },\n        { key: \"player\", frame: \"pixil-frame-3.png\" },\n        { key: \"player\", frame: \"pixil-frame-4.png\" },\n        { key: \"player\", frame: \"pixil-frame-5.png\" }\n      ],\n      frameRate: 2,\n      repeat: -1\n    });\n    this.scene.anims.create({\n      key: \"idle_nospear\",\n      frames: [\n        { key: \"player\", frame: \"pixil-frame-6.png\" },\n        { key: \"player\", frame: \"pixil-frame-7.png\" },\n      ],\n      frameRate: 2,\n      repeat: -1\n    });\n    this.scene.anims.create({\n      key: \"walk_nospear\",\n      frames: [\n        { key: \"player\", frame: \"pixil-frame-8.png\" },\n        { key: \"player\", frame: \"pixil-frame-9.png\" },\n        { key: \"player\", frame: \"pixil-frame-10.png\" },\n        { key: \"player\", frame: \"pixil-frame-11.png\" },\n      ],\n      frameRate: 2,\n      repeat: -1\n    });\n    \n    this.id = id;\n    this.isPlayer = isPlayer;\n    // this.maxSpeed = Const.PLAYER_MAX_SPEED;\n    // this.currentState = PlayerStates.IDLE;\n    this.jumpReleased = true;\n    this._jumping = false;\n    this._grounded = false;\n    this._sprinting = false;\n    this._turning = false;\n    this._moving = [];\n    this._clickDown = false;\n    this.createSpear = createSpear;\n    this.hasSpear = true;\n    this.isNew = true;\n    this.currentScale = 2.8;\n    this.currentAnimation = \"idle_spear\"\n    // this._addAnimations([{ name: \"walk\", frames: [1, 2, 3] }], 8, true);\n  }\n\n  setup(scene) {\n    super.setup(scene);\n    this.anims.play(\"idle_spear\");\n    this.setSize(200, 200);\n    this.setScale(0.01);\n    this.cursors = this.scene.input.keyboard.addKeys({\n      up: Phaser.Input.Keyboard.KeyCodes.W,\n      down: Phaser.Input.Keyboard.KeyCodes.S,\n      left: Phaser.Input.Keyboard.KeyCodes.A,\n      right: Phaser.Input.Keyboard.KeyCodes.D\n    });\n    this.setCollideWorldBounds(false);\n    if (this.body) {\n      const body = this.body as Phaser.Physics.Arcade.Body;\n      this._velocity = body.velocity;\n      this._accel = body.acceleration;\n      //   body.maxVelocity.set(10, 10 * 10);\n      body.setDrag(1200, 1200);\n      body.setMaxSpeed(300);\n      // body.setSize(body.width - 2, body.height);\n    }\n  }\n\n  update() {\n    if (this.isNew) {\n      this.scale = this.currentScale;\n      this.currentScale -= 0.05;\n      if (this.currentScale <= SCALE) {\n        this.isNew = false;\n        this.scale = SCALE;\n        this.scene.cameras.main.shake(200, 0.005);\n      }\n      return;\n    }\n    let moving = false\n\n    if (this.cursors && this.body && this.isPlayer) {\n      const body = this.body as Phaser.Physics.Arcade.Body;\n      const pointer = this.scene.input.activePointer;\n      const directionRad = Phaser.Math.Angle.Between(\n        body.x,\n        body.y,\n        pointer.x + this.scene.cameras.main.scrollX,\n        pointer.y + +this.scene.cameras.main.scrollY\n      );\n      if (pointer.isDown) {\n        this._clickDown = true;\n      } else if (this._clickDown && this.createSpear && this.hasSpear) {\n        this.createSpear();\n        this.hasSpear = false;\n        this._clickDown = false;\n      } else {\n        this._clickDown = false;\n      }\n      // const directionRad = 0\n      const direction = (directionRad / (2 * Math.PI)) * 360;\n      // const direction = Math.atan((pointer.x - body.x) / (pointer.y - body.y)) / (2 * Math.PI) * 360;\n      //some light randomness to the bullet angle\n      // Calculate X and y velocity of bullet to moves it from shooter to target\n      // if (pointer.y >= this.y) {\n      //   this.xSpeed = this.speed * Math.sin(this.direction);\n      //   this.ySpeed = this.speed * Math.cos(this.direction);\n      // } else {\n      //   this.xSpeed = -this.speed * Math.sin(this.direction);\n      //   this.ySpeed = -this.speed * Math.cos(this.direction);\n      // }\n      body.rotation = direction; // angle bullet with shooters rotation\n      let localXAcceleration = 0;\n      let localYAcceleration = 0;\n      if (this.cursors.left && this.cursors.left.isDown) {\n        moving = true\n        localXAcceleration = -6000;\n      } else if (this.cursors.right && this.cursors.right.isDown) {\n        moving = true\n        localXAcceleration = 6000;\n      } else {\n        localXAcceleration = 0;\n      }\n\n      if (this.cursors.down && this.cursors.down.isDown) {\n        moving = true\n        localYAcceleration = 6000;\n      } else if (this.cursors.up && this.cursors.up.isDown) {\n        moving = true\n        localYAcceleration = -6000;\n      } else {\n        localYAcceleration = 0;\n      }\n      // const accelerationX = Math.sin(directionRad) * localXAcceleration + Math.cos(directionRad) * localYAcceleration;\n      // const accelerationY = Math.cos(directionRad) * localXAcceleration + Math.sin(directionRad) * localYAcceleration;\n      body.setAccelerationX(localXAcceleration);\n      body.setAccelerationY(localYAcceleration);\n      // if(moving && this.currentAnimation.includes(\"idle\")){\n      //   const anim = this.hasSpear ? \"walk_spear\" :  \"walk_nospear\"\n      //   this.anims.play(anim)\n      //   this.currentAnimation = anim\n      // }\n      // if(!moving && this.currentAnimation.includes(\"walk\")){\n      //   const anim = this.hasSpear ? \"idle_spear\" :  \"idle_nospear\"\n      //   this.anims.play(anim)\n      //   this.currentAnimation = anim\n      // }\n    }\n    // this._updateAnimations();\n    // this._grounded = this.body.onFloor() || this.body.touching.down;\n\n    // if (this._moving[Phaser.LEFT] ) {\n    //     this._accel.x = -this.moveSpeed;\n    // } else if (this._moving[Phaser.RIGHT]) {\n    //     this._accel.x = this.moveSpeed;\n    // } else {\n    //     // set back to idle state if we are completely still and on the ground\n    //     this._accel.x = 0;\n    //     if (this._velocity.x === 0 && this._grounded) {\n    //         this.currentState = PlayerStates.Idle;\n    //     }\n    // }\n\n    // // check if we are turning sharply\n    // if (this._grounded && !this._turning) {\n    //     if ( (this._velocity.x < -Const.PLAYER_MAX_SPEED*0.6 && this._accel.x > 0) ||\n    //          (this._velocity.x > Const.PLAYER_MAX_SPEED*0.6 && this._accel.x < 0) ) {\n    //         this._turning = true;\n    //         this.currentState = PlayerStates.Turning;\n    //     }\n    // }\n\n    // // if we are on the ground and moving at all set\n    // // the player state to walking. we need this as if we land from\n    // // a jump still moving horizontally it needs to look like player\n    // // is running to a halt.\n    // if (Math.abs(this._velocity.x) > 0 && this._grounded && !this._turning) {\n    //     this.currentState = PlayerStates.Walking;\n    // }\n\n    // // if we land on the ground while jumping, we are clearly\n    // // not jumping anymore\n    // if (this._grounded && this._jumping && !this._turning) {\n    //     this._jumping = false;\n    //     this.currentState = PlayerStates.Idle;\n    // }\n\n    // // perform variable jump height check\n    // if (this._jumping && this.jumpReleased) {\n    //     if (this._velocity.y < Const.PLAYER_JUMP_SPEED/4) {\n    //         this._velocity.y = Const.PLAYER_JUMP_SPEED/4;\n    //     }\n    // }\n\n    // // cap player fall speed\n    // this._velocity.y = Math.min(this._velocity.y, Const.PLAYER_MAX_FALL_SPEED);\n  }\n\n  jump() {\n    // if (this._grounded && !this._jumping && this.jumpReleased) {\n    //     // we have not released the key yet\n    //     this.jumpReleased = false;\n    //     // set the appropriate state\n    //     this._jumping = true;\n    //     this._turning = false;\n    //     this.currentState = PlayerStates.Jumping;\n    //     this._velocity.y = Const.PLAYER_JUMP_SPEED;\n    //     this.game.jumpSound.play();\n    // }\n  }\n\n  sprint(active) {\n    // if (!this._jumping && Math.abs(this._accel.x) > 0 && active) {\n    //     this.body.maxVelocity.x = Const.PLAYER_MAX_SPRINT_SPEED;\n    // } else if (!active) {\n    //     this.body.maxVelocity.x = this.maxSpeed;\n    // }\n    // this._sprinting = active;\n  }\n\n  move(direction, active) {\n    // this._turning = false;\n    // this._moving[direction] = active;\n    // // if we are currently jumping then don't change our\n    // // facing direction and don't play the walking animation\n    // if (!this._jumping) {\n    //     this.currentState = PlayerStates.Walking;\n    //     this.facing = direction;\n    // }\n  }\n\n  _updateAnimations() {\n    // flip the player in the correct facing direction and play\n    // the current state animation\n    // if (this.facing !== this._prevFacing) {\n    //     this.flip();\n    //     this._prevFacing = this.facing;\n    // }\n    // switch (this.currentState) {\n    //     case PlayerStates.Walking:\n    //         // set the walking / running animation based on the current x velocity\n    //         let currentAnim = this.animations.currentAnim;\n    //         let delay = Math.min(200, (Const.PLAYER_MAX_SPEED / (Math.abs(this._velocity.x) / 80)));\n    //         currentAnim.delay = delay;\n    //         this.animations.play('walk');\n    //         break;\n    //     case PlayerStates.Jumping:\n    //         this.frame = 5;\n    //         break;\n    //     case PlayerStates.Turning:\n    //         this.frame = 4;\n    //         break;\n    //     case PlayerStates.Idle: // jshint ignore:line\n    //     default:\n    //         this.frame = 0;\n    //         break;\n    // }\n  }\n}\n\nexport default Player;\n","import Phaser from \"phaser\";\nimport Monster from \"./monster\";\n\nconst MIN_SPEED = 200;\nconst DRAG = 1000;\nconst INIT_SPEED = 1500;\n\nclass Spear extends Phaser.Physics.Arcade.Sprite {\n  id: string;\n  _angle: number;\n  _velocity: any;\n  _initSpeed: number;\n  _maxSpeed: number;\n  _wallHit: boolean;\n  _monstersHit: Phaser.GameObjects.Group\n\n  constructor(scene : Phaser.Scene, x, y, id, angle = 0) {\n    console.log(\"SPEAR:\", x, y, angle);\n    super(scene, x, y, \"spear\", 0);\n    this.id = id;\n    this._angle = angle;\n    this._initSpeed = INIT_SPEED;\n    this._maxSpeed = 6000;\n    this._wallHit = false;\n    this._monstersHit = scene.add.group()\n  }\n\n  setup(scene: Phaser.Scene, group: Phaser.GameObjects.Group) {\n    scene.physics.world.enable(this);\n    scene.add.existing(this);\n    group.add(this);\n    this.setSize(50, 50);\n    this.setDisplaySize(40, 40);\n    if (this.body) {\n      const body = this.body as Phaser.Physics.Arcade.Body;\n      // this.body.setSize(this.), 40);\n      body.rotation = (this._angle / (2 * Math.PI)) * 360;\n      var speed = this._initSpeed;\n      body.setVelocity(speed * Math.cos(this._angle), speed * Math.sin(this._angle));\n      // body.setAcceleration(accel * Math.cos(this._angle), accel * Math.sin(this._angle))\n      body.setDrag(Math.abs(DRAG * Math.cos(this._angle)), Math.abs(DRAG * Math.sin(this._angle)));\n      this._velocity = body.velocity;\n      body.setMaxSpeed(this._maxSpeed);\n      // body.drag.set(1, 0);\n    }\n  }\n\n  onWallHit() {\n    if (this._wallHit)\n      return;\n    this._wallHit = true;\n    this.scene.cameras.main.shake(25, 0.01, true);\n  }\n\n  onHitMonster(m: Monster) {\n    if (this._monstersHit.contains(m))\n      return;\n    this._monstersHit.add(m);\n    this.scene.cameras.main.shake(20, 0.02, false);\n  }\n\n  update() {\n    if (this.body) {\n      const body = this.body as Phaser.Physics.Arcade.Body;\n      body.rotation = (this._angle / (2 * Math.PI)) * 360 + 90;\n      if (this._wallHit) {\n        body.setVelocityX(0);\n        body.setVelocityY(0);\n        body.setImmovable();\n      } else {\n        if (body.speed < MIN_SPEED) {\n          body.setVelocityX(MIN_SPEED * Math.cos(this._angle));\n          body.setVelocityY(MIN_SPEED * Math.sin(this._angle));\n        }\n        this._velocity = body.velocity;\n      }\n      this._monstersHit.setXY(body.position.x, body.position.y)\n    }\n  }\n\n  _addAnimations(anims, frameRate = 60, loop = false) {\n    // for (var i = 0, l = anims.length; i < l; ++i) {\n    //     let anim = anims[i];\n    //     // this.animations.add(anim.name, anim.frames, frameRate, loop);\n    // }\n  }\n}\n\nexport default Spear;\n","import Entity from \"./entity\";\nimport * as Const from \"../constants\";\n\nconst DRAG = 1200;\nconst JUMP_VEL = 300;\nconst UPDATE_RATE = 30;\nconst FIRE_RATE = .15;\n\nclass Monster extends Phaser.Physics.Arcade.Sprite {\n  id: string;\n  isHit: boolean;\n  createLaser: Function | undefined;\n  _rand: Phaser.Math.RandomDataGenerator;\n  _numUpdates: number;\n  _numRand: number;\n  playingHit: boolean;\n\n  constructor(scene, x, y, id) {\n    super(scene, x, y, \"monster\", 0);\n    this.scene.anims.create({\n      key: \"walk\",\n      frames: [\n        { key: \"monster\", frame: \"pixil-frame-0.png\" },\n        { key: \"monster\", frame: \"pixil-frame-1.png\" }\n      ],\n      frameRate: 2,\n      repeat: -1\n    });\n    this.scene.anims.create({\n      key: \"appear\",\n      frames: [\n        { key: \"monster\", frame: \"pixil-frame-2.png\" },\n        { key: \"monster\", frame: \"pixil-frame-3.png\" },\n        { key: \"monster\", frame: \"pixil-frame-4.png\" },\n        { key: \"monster\", frame: \"pixil-frame-5.png\" },\n      ],\n      frameRate: 6,\n      repeat: 0\n    });\n    this.scene.anims.create({\n      key: \"death\",\n      frames: [\n        { key: \"monster\", frame: \"pixil-frame-7.png\" },\n        { key: \"monster\", frame: \"pixil-frame-8.png\" },\n        { key: \"monster\", frame: \"pixil-frame-9.png\" },\n        { key: \"monster\", frame: \"pixil-frame-10.png\" },\n      ],\n      frameRate: 6,\n      repeat: 0\n    });\n    this.id = id;\n    this.isHit = false;\n    this._rand = new Phaser.Math.RandomDataGenerator([id]);\n    this._numUpdates = 0;\n    this.playingHit = false;\n    this._numRand = 0;\n  }\n\n  setup(scene, createLaser) {\n    this.setScale(0.3, 0.3);\n    this.anims.play(\"appear\");\n    this.scene.time.delayedCall(666, f => {\n      this.anims.play(\"walk\")\n    });\n    this.createLaser = createLaser;\n    scene.physics.world.enable(this);\n    scene.add.existing(this);\n    // this.setCollideWorldBounds(false);\n    if (this.body) {\n      const body = this.body as Phaser.Physics.Arcade.Body;\n      //   body.maxVelocity.set(10, 10 * 10);\n      body.setDrag(DRAG, DRAG);\n      body.setMaxSpeed(JUMP_VEL);\n      body.setSize(body.width - 2, body.height);\n    }\n  }\n\n  catchUp() {\n    for (const _ of [...Array(this._numRand).keys()]) {\n      this._rand.frac();\n    }\n  }\n\n  update() {\n    if (this.body) {\n      if (this.isHit && !this.playingHit) {\n        this.anims.play(\"death\")\n        this.playingHit = true\n        return;\n      }\n      const body = this.body as Phaser.Physics.Arcade.Body;\n      if (this._numUpdates % UPDATE_RATE === 0) {\n        this._numUpdates = 0;\n        var rand = this._rand.frac();\n        this._numRand = this._numRand + 1;\n\n        var walk_rate = 1.0 - FIRE_RATE;\n        if (rand < walk_rate / 4.0) {\n          body.setVelocityX(-JUMP_VEL);\n        } else if (rand < (2 * walk_rate) / 4.0) {\n          body.setVelocityX(JUMP_VEL);\n        } else if (rand < (3 * walk_rate) / 4.0) {\n          body.setVelocityY(JUMP_VEL);\n        } else if (rand < walk_rate) {\n          body.setVelocityY(-JUMP_VEL);\n        } else if (this.createLaser) {\n          this.createLaser(this);\n        }\n      }\n      this._numUpdates = this._numUpdates + 1;\n    }\n  }\n}\n\nexport default Monster;\n","import Phaser from \"phaser\";\n\n// const INIT_SPEED = 1500;\nconst INIT_SPEED = 100;\n\n\nclass Laser extends Phaser.Physics.Arcade.Sprite {\n  id: string;\n  _angle: number;\n  _velocity: any;\n  _initSpeed: number;\n  constructor(scene: Phaser.Scene, x, y, id, angle = 0) {\n    super(scene, x, y, \"laser\", 0);\n    this.id = id;\n    this._angle = angle;\n    this._initSpeed = INIT_SPEED;\n  }\n\n  setup(scene: Phaser.Scene, group: Phaser.GameObjects.Group) {\n    scene.physics.world.enable(this);\n    scene.add.existing(this);\n    group.add(this);\n    this.setSize(20, 20);\n    this.setDisplaySize(20, 20);\n    if (this.body) {\n      const body = this.body as Phaser.Physics.Arcade.Body;\n      // this.body.setSize(this.), 40);\n      body.rotation = (this._angle / (2 * Math.PI)) * 360;\n      var speed = this._initSpeed;\n      body.setVelocity(speed * Math.cos(this._angle), speed * Math.sin(this._angle));\n      this._velocity = body.velocity;\n    }\n  }\n\n  update() {\n    if (this.body) {\n      const body = this.body as Phaser.Physics.Arcade.Body;\n      body.rotation = (this._angle / (2 * Math.PI)) * 360 + 90;\n\n    }\n  }\n\n  _addAnimations(anims, frameRate = 60, loop = false) {\n    // for (var i = 0, l = anims.length; i < l; ++i) {\n    //     let anim = anims[i];\n    //     // this.animations.add(anim.name, anim.frames, frameRate, loop);\n    // }\n  }\n}\n\nexport default Laser;\n","import Entity from \"./entity\";\nimport * as Const from \"../constants\";\nimport Spear from \"./spear\";\n\nlet PlayerStates = {\n  Idle: 0,\n  Walking: 1,\n  Jumping: 2,\n  Turning: 3,\n  Ducking: 4\n};\n\nclass Ghost extends Entity {\n  cursors: Phaser.Types.Input.Keyboard.CursorKeys | undefined;\n  constructor(scene, x, y, id = \"local\") {\n    super(scene, x, y, \"ghost\", 0);\n  }\n\n  setup(scene) {\n    super.setup(scene);\n    this.cursors = this.scene.input.keyboard.addKeys({\n      up: Phaser.Input.Keyboard.KeyCodes.W,\n      down: Phaser.Input.Keyboard.KeyCodes.S,\n      left: Phaser.Input.Keyboard.KeyCodes.A,\n      right: Phaser.Input.Keyboard.KeyCodes.D\n    });\n    this.setCollideWorldBounds(false);\n    if (this.body) {\n      const body = this.body as Phaser.Physics.Arcade.Body;\n      //   body.maxVelocity.set(10, 10 * 10);\n      body.setDrag(1200, 1200);\n      body.setMaxSpeed(300);\n      body.setSize(body.width - 2, body.height);\n    }\n  }\n\n  update() {\n    if (this.cursors && this.body) {\n      const body = this.body as Phaser.Physics.Arcade.Body;\n      // const pointer = this.scene.input.activePointer;\n      // const directionRad = Phaser.Math.Angle.Between(\n      // const direction = Math.atan((pointer.x - body.x) / (pointer.y - body.y)) / (2 * Math.PI) * 360;\n      //some light randomness to the bullet angle\n      // Calculate X and y velocity of bullet to moves it from shooter to target\n      // if (pointer.y >= this.y) {\n      //   this.xSpeed = this.speed * Math.sin(this.direction);\n      //   this.ySpeed = this.speed * Math.cos(this.direction);\n      // } else {\n      //   this.xSpeed = -this.speed * Math.sin(this.direction);\n      //   this.ySpeed = -this.speed * Math.cos(this.direction);\n      // } // angle bullet with shooters rotatio\n      let localXAcceleration = 0;\n      let localYAcceleration = 0;\n      if (this.cursors.left && this.cursors.left.isDown) {\n        localXAcceleration = -6000;\n      } else if (this.cursors.right && this.cursors.right.isDown) {\n        localXAcceleration = 6000;\n      } else {\n        localXAcceleration = 0;\n      }\n\n      if (this.cursors.down && this.cursors.down.isDown) {\n        localYAcceleration = 6000;\n      } else if (this.cursors.up && this.cursors.up.isDown) {\n        localYAcceleration = -6000;\n      } else {\n        localYAcceleration = 0;\n      }\n      // const accelerationX = Math.sin(directionRad) * localXAcceleration + Math.cos(directionRad) * localYAcceleration;\n      // const accelerationY = Math.cos(directionRad) * localXAcceleration + Math.sin(directionRad) * localYAcceleration;\n      body.setAccelerationX(localXAcceleration);\n      body.setAccelerationY(localYAcceleration);\n    }\n  }\n}\n\nexport default Ghost;\n","import PeerNetwork from \"./network/peer_network\";\nimport { TextLabel } from \"./gui/textLabel\";\nimport Arena from \"./entities/arena\";\nimport * as Const from \"./constants\";\nimport _ from \"lodash\";\nimport Player from \"./entities/player\";\nimport Spear from \"./entities/spear\";\nimport Monster from \"./entities/monster\";\nimport Laser from \"./entities/laser\";\nimport Ghost from \"./entities/ghost\";\nconst uuidv4 = require(\"uuid/v4\");\n\nconst WAVES = [1, 2, 3, 5, 10];\n\nexport default class LevelManager {\n  network: any;\n  remotePlayers: Phaser.GameObjects.Group | any;\n  _connectionStatusText: any;\n  _introText: any;\n  _titleSprite: any;\n  _deadText: TextLabel;\n  _startText: any;\n  _instructionText: any;\n  _malwareText: any;\n  _entitiesGroup: Phaser.GameObjects.Group;\n  _spearGroup: Phaser.GameObjects.Group;\n  _laserGroup: Phaser.GameObjects.Group;\n  _monsterGroup: Phaser.GameObjects.Group;\n  _blockGroup: Phaser.Physics.Arcade.StaticGroup;\n  _physics: any;\n  staticObjects: Phaser.Physics.Arcade.Group;\n  localPlayer: any;\n  blocksGroup: any;\n  itemBlocksGroup: any;\n  game: Phaser.Game;\n  scene: Phaser.Scene;\n  leader: boolean;\n  dead: boolean;\n  broadcastTimer: Phaser.Time.TimerEvent | undefined;\n  ghost: any;\n  gameStarted: boolean;\n  spawning: boolean;\n  canSpawn: boolean;\n  arena: Arena | undefined;\n  waveNumber: number;\n  constructor(game: Phaser.Game, scene: Phaser.Scene) {\n    this.game = game;\n    this.scene = scene;\n    this.remotePlayers = null;\n    this.staticObjects = new Phaser.Physics.Arcade.Group(this.scene.physics.world, scene);\n    this.leader = false;\n    this._connectionStatusText = null;\n    this.dead = false;\n    this.waveNumber = 0;\n\n    // make sure to cleanup peerjs when window is closed\n    window.onunload = window.onbeforeunload = f => {\n      this._disconnect();\n      return;\n    };\n    this.gameStarted = false;\n    this.spawning = false;\n    this.canSpawn = false;\n    // Init groups\n    this._entitiesGroup = this.scene.add.group();\n    this._spearGroup = this.scene.add.group();\n    this._laserGroup = this.scene.add.group();\n    this._monsterGroup = this.scene.add.group();\n    this._blockGroup = this.scene.physics.add.staticGroup();\n    this.remotePlayers = this.scene.add.group();\n    this._introText = new TextLabel(this.scene, -300, -200, \"You've gone offline!\", null, true, false, 0, 32);\n    this._titleSprite = this.scene.add.sprite(0, -30, \"malware\");\n    this._titleSprite.setScale(2);\n    this._deadText = new TextLabel(this.scene, -190, -200, \"He's dead Jim!\", null, true, false, 0, 32);\n    this._startText = new TextLabel(this.scene, -270, 100, \"Press space to start playing\", null, true, true, 0, 20);\n    this._instructionText = new TextLabel(\n      this.scene,\n      -280,\n      350,\n      \"WASD to move. Mouse to aim. Click to shoot.\",\n      null,\n      true,\n      false,\n      0,\n      14\n    );\n    this._malwareText = new TextLabel(\n      this.scene,\n      -220,\n      390,\n      \"Fight the malwares for your life\",\n      null,\n      true,\n      false,\n      0,\n      14\n    );\n    this.scene.add.existing(this._introText);\n    this.scene.add.existing(this._startText);\n    this.scene.add.existing(this._instructionText);\n    this.scene.add.existing(this._deadText);\n    this._deadText.alpha = 0;\n    this._deadText.depth = 20;\n    this.scene.add.existing(this._malwareText);\n    this.scene.cameras.main.centerOn(0, 100);\n  }\n\n  shutdown() {\n    this.remotePlayers.destroy();\n    // this.gameStarted = false;\n    // this.spawning = false;\n    setTimeout(() => {\n      window.location.href = \"\"\n    }, 700);\n  }\n\n  _createWorld() {\n    this.network = new PeerNetwork(this);\n    this.scene.add.sprite(0, -180, \"avast\");\n    this._connectionStatusText = new TextLabel(this.scene, 0, -50, \"connecting...\", null, true, false, 0);\n    this.scene.add.existing(this._connectionStatusText);\n    this.network.addListener(Const.PeerJsEvents.OPEN, this._onOpen, this);\n    this.network.addListener(Const.PeerJsEvents.DATA, this._onData, this);\n    this.network.addListener(Const.PeerJsEvents.CLOSE, this._onClose, this);\n    const createSpear = () => {\n      const ID = uuidv4();\n      const rotation = this.localPlayer.rotation;\n      const spear = new Spear(this.scene, this.localPlayer.x, this.localPlayer.y, ID, rotation);\n      this.network.broadcastToPeers(Const.PeerJsMsgType.SPEAR_CREATED, {\n        id: ID,\n        rotation: spear._angle,\n        x: Math.round(this.localPlayer.x),\n        y: Math.round(this.localPlayer.y)\n      });\n      spear.setup(this.scene, this._spearGroup);\n    };\n    this.localPlayer = new Player(this.scene, 0, -185, \"local\", true, createSpear);\n    this.localPlayer.setup(this.scene);\n    this.scene.cameras.main.startFollow(this.localPlayer);\n    this._entitiesGroup.add(this.localPlayer);\n    this.arena = new Arena(this.scene, 0, 300);\n    this.arena.setup(this.scene);\n    this.scene.physics.add.collider(this.localPlayer, this.arena._blockGroup);\n    this.scene.physics.add.collider(this._monsterGroup, this.arena._blockGroup);\n    this.scene.physics.add.collider(this._laserGroup, this.arena._blockGroup, (laser, area) => {\n      const l = laser as Laser;\n      _.forEach(this._laserGroup.getChildren(), laser => {\n        if (laser && laser.id === l.id) {\n          laser.destroy();\n        }\n      });\n    });\n    this.scene.physics.add.overlap(this._laserGroup, this.localPlayer, (laser, player) => {\n      const l = laser as Laser;\n      const p = player as Player;\n      if (p.id !== \"local\") {\n        return;\n      }\n      _.forEach(this._laserGroup.getChildren(), laser => {\n        if (laser && laser.id === l.id) {\n          laser.destroy();\n        }\n      });\n\n      if (this.remotePlayers.children.size > 0) {\n        this.ghost = new Ghost(this.scene, p.body.x, p.body.y, \"local\");\n        this.ghost.setup(this.scene);\n        this.scene.cameras.main.startFollow(this.ghost);\n        this._entitiesGroup.add(this.ghost);\n      } else {\n        this._deadText.alpha = 1;\n        this.shutdown();\n      }\n      p.destroy();\n      this.network.broadcastToPeers(Const.PeerJsMsgType.PLAYER_DEAD, {});\n      this.dead = true;\n      console.log(\"dead called\");\n    });\n    this.scene.physics.add.collider(this._spearGroup, this.arena._blockGroup, (spear, area) => {\n      const s = spear as Spear;\n      s.onWallHit();\n    });\n    this.scene.physics.add.overlap(this._spearGroup, this._monsterGroup, (spear, monster) => {\n      const s = spear as Spear;\n      const m = monster as Monster;\n      m.isHit = true;\n      m.body.mass = 0;\n      s.onHitMonster(m);\n      this.scene.time.delayedCall(666, f => {\n        if (this.leader) {\n          _.forEach(this._monsterGroup.getChildren(), monster => {\n            if (monster && monster.id === m.id) {\n              monster.destroy();\n              this.network.broadcastToPeers(Const.PeerJsMsgType.DEAD_MONSTER, {\n                id: m.id\n              });\n            }\n          });\n        }\n      });\n    });\n    this.scene.physics.add.collider(this._spearGroup, this.localPlayer, (spear, player) => {\n      const s = spear as Spear;\n      const p = player as Player;\n      if (p.hasSpear || p.id !== \"local\") {\n        return;\n      }\n      _.forEach(this._spearGroup.getChildren(), spear => {\n        if (spear && spear.id === s.id) {\n          spear.destroy();\n        }\n      });\n      this.network.broadcastToPeers(Const.PeerJsMsgType.SPEAR_PICKED_UP, {\n        id: s.id\n      });\n      this.localPlayer.hasSpear = true;\n    });\n  }\n  _createMap() {\n    throw new Error(\"Method not implemented.\");\n  }\n  _createMapObjects() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  _updateCollision() {\n    // super._updateCollision();\n    //this._physics.arcade.collide(this.localPlayer, this.remotePlayers,\n    //null, this._onPlayerCollision, this);\n    // this._physics.arcade.collide(this.remotePlayers, this._collisionLayer);\n  }\n  _collisionLayer(remotePlayers: any, _collisionLayer: any) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  _updateEntities() {\n    for (const e of this._entitiesGroup.getChildren()) {\n      e.update();\n    }\n    for (const s of this._spearGroup.getChildren()) {\n      s.update();\n    }\n    for (const m of this._monsterGroup.getChildren()) {\n      m.update();\n    }\n    if (!this.dead) {\n      this._broadcastPlayerUpdate();\n    }\n    if (this.leader) {\n      this._broadcastMonstersUpdate();\n    }\n  }\n\n  createLaser = monster => {\n    const ID = uuidv4();\n    let closest;\n    let closestDistance = 10e10;\n    if (!this.dead) {\n      closest = this.localPlayer;\n      closestDistance = Phaser.Math.Distance.Between(\n        monster.body.x,\n        monster.body.y,\n        this.localPlayer.body.x,\n        this.localPlayer.body.y\n      );\n    }\n    for (const p of this.remotePlayers.getChildren()) {\n      const d = Phaser.Math.Distance.Between(monster.body.x, monster.body.y, p.body.x, p.body.y);\n      if (d < closestDistance) {\n        closestDistance = d;\n        closest = p;\n      }\n    }\n    if (closest) {\n      const rotationRad = Phaser.Math.Angle.Between(monster.body.x, monster.body.y, closest.body.x, closest.body.y);\n      const laser = new Laser(this.scene, monster.x, monster.y, ID, rotationRad);\n      laser.setup(this.scene, this._laserGroup);\n    }\n  };\n\n  createMonster(x, y, wait = true) {\n    const xOff = Math.ceil((Math.random() - 0.5) * 100);\n    const yOff = Math.ceil((Math.random() - 0.5) * 100);\n    this.scene.time.delayedCall(wait ? Math.random() * 4000 : 1, f => {\n      const m = new Monster(this.scene, x + xOff, y + yOff, uuidv4());\n      m.setup(this.scene, this.createLaser);\n      this._monsterGroup.add(m);\n    });\n  }\n\n  update() {\n    if (this.gameStarted) {\n      // this._updateCollision();\n      this._updateEntities();\n      if (\n        this.leader &&\n        this.canSpawn &&\n        this.arena &&\n        !this.spawning &&\n        this._monsterGroup.getChildren().length === 0 &&\n        this.arena\n      ) {\n        this.spawning = true;\n        for (const d of this.arena.doors) {\n          d.open();\n        }\n\n        this.network.broadcastToPeers(Const.PeerJsMsgType.DOOR_OPEN, {});\n        // SPAWN MONSTERS HERE\n\n        const nmbrMonsters = WAVES[this.waveNumber];\n        this.waveNumber++;\n        for (const step of [...Array(nmbrMonsters)].keys()) {\n          const ds = this.arena.doors;\n          const OFFSET = 120;\n          this.createMonster(ds[0].x + OFFSET, ds[0].y);\n          this.createMonster(ds[1].x - OFFSET, ds[1].y);\n          this.createMonster(ds[2].x, ds[2].y + OFFSET);\n          this.createMonster(ds[3].x, ds[3].y - OFFSET);\n        }\n\n        this.scene.time.delayedCall(2000, f => {\n          this.network.broadcastToPeers(Const.PeerJsMsgType.DOOR_CLOSE, {});\n          this.spawning = false;\n          if (this.arena) {\n            for (const d of this.arena.doors) {\n              d.close();\n            }\n          }\n        });\n      }\n    } else {\n      this.scene.input.keyboard.on(\"keydown\", event => {\n        switch (event.key) {\n          case \" \":\n            if (!this.gameStarted) {\n              this.gameStarted = true;\n              this._startText.destroy();\n              this._introText.destroy();\n              this._titleSprite.destroy();\n              this._deadText.alpha = 0;\n              this._createWorld();\n            }\n            break;\n        }\n      });\n    }\n  }\n  _broadcastPlayerUpdate() {\n    var body = this.localPlayer.body;\n    this.network.broadcastToPeers(Const.PeerJsMsgType.PLAYER_UPDATE, {\n      rotation: this.localPlayer.rotation,\n      state: this.localPlayer.currentState,\n      x: Math.round(this.localPlayer.x),\n      y: Math.round(this.localPlayer.y),\n      vx: body.velocity.x.toFixed(2),\n      vy: body.velocity.y.toFixed(2),\n      hasSpear: this.localPlayer.hasSpear\n    });\n  }\n\n  _broadcastMonstersUpdate() {\n    const monsters = this._monsterGroup.getChildren() as Monster[];\n    this.network.broadcastToPeers(Const.PeerJsMsgType.MONSTERS_UPDATE, {\n      monsters: monsters.map(m => ({\n        id: m.id,\n        rotation: m.rotation,\n        x: Math.round(m.x),\n        y: Math.round(m.y),\n        vx: m.body.velocity.x.toFixed(2),\n        vy: m.body.velocity.y.toFixed(2),\n        numUpdates: m._numUpdates,\n        numRand: m._numRand\n      }))\n    });\n  }\n\n  _disconnect() {\n    this.network.destroy();\n  }\n\n  /**\n   * peer js event listeners\n   */\n  _onOpen(id) {\n    if (this.network.leader) {\n      this.leader = true;\n    }\n    this._connectionStatusText.setText(`connected, id: ${id}, leader: ${this.leader}`);\n    if (this.arena) {\n      this.scene.time.delayedCall(2000, f => {\n        this.canSpawn = true;\n      });\n    }\n    // this.scene.time.delayedCall(Const.NETWORK_STATUS_CLEAR_TIME, f => (this._connectionStatusText.visible = false));\n  }\n\n  _onData(type, data) {\n    var remotePlayer = _.find(this.remotePlayers.getChildren(), player => {\n      return player.id === data.from;\n    });\n    switch (type) {\n      case Const.PeerJsMsgType.HELLO:\n        this._handleHello(data);\n        break;\n      case Const.PeerJsMsgType.PLAYER_UPDATE:\n        this._handlePlayerUpdate(remotePlayer, data);\n        break;\n      case Const.PeerJsMsgType.BLOCK_BUMP:\n        this._handleBlockBump(data);\n        break;\n      case Const.PeerJsMsgType.ITEM_BLOCK_BUMP:\n        this._handleItemBlockBump(data);\n        break;\n      case Const.PeerJsMsgType.SPEAR_CREATED:\n        this._handleSpearCreated(data);\n        break;\n      case Const.PeerJsMsgType.SYNC_SPEARS:\n        this._handleSyncSpears(data);\n        break;\n      case Const.PeerJsMsgType.SPEAR_PICKED_UP:\n        this._handleSpearPickedUp(data);\n        break;\n      case Const.PeerJsMsgType.MONSTERS_UPDATE:\n        this._handleMonstersUpdate(data);\n        break;\n      case Const.PeerJsMsgType.PLAYER_DEAD:\n        this._handlePlayerDead(remotePlayer);\n        break;\n      case Const.PeerJsMsgType.DEAD_MONSTER:\n        this._handleDeadMonster(data);\n        break;\n      case Const.PeerJsMsgType.DOOR_OPEN:\n        this._handleDoor(true);\n        break;\n      case Const.PeerJsMsgType.DOOR_CLOSE:\n        this._handleDoor(false);\n    }\n  }\n\n  _onClose(peer) {\n    _.forEach(this.remotePlayers.getChildren(), player => {\n      if (player && player.id === peer) {\n        player.destroy();\n      }\n    });\n  }\n\n  /**\n   * level event listeners\n   */\n  _onBlockBump(player, block) {\n    // super._onBlockBump(player, block);\n\n    if (player.body.touching.up) {\n      this.network.broadcastToPeers(Const.PeerJsMsgType.BLOCK_BUMP, {\n        idx: this.blocksGroup.getChildIndex(block)\n      });\n    }\n  }\n\n  _onItemBlockBump(player, itemBlock) {\n    // super._onItemBlockBump(player, itemBlock);\n\n    if (player.body.touching.up) {\n      this.network.broadcastToPeers(Const.PeerJsMsgType.ITEM_BLOCK_BUMP, {\n        idx: this.itemBlocksGroup.getChildIndex(itemBlock)\n      });\n    }\n  }\n\n  /**\n   * msg handlers\n   */\n  _handleHello(data) {\n    console.log(`hello from: ${data.from}`);\n    this.network.connectToPeer(data.from);\n\n    this._connectionStatusText.visible = true;\n    this._connectionStatusText.setText(\"player joined\");\n\n    this.scene.time.delayedCall(Const.NETWORK_STATUS_CLEAR_TIME, f => (this._connectionStatusText.visible = false));\n    // Setup the player\n    var newPlayer = new Player(this.scene, data.x, data.y, data.from);\n    newPlayer.setup(this.scene);\n    this.remotePlayers.add(newPlayer);\n    this._entitiesGroup.add(newPlayer);\n    if (this.leader) {\n      this.network.peerMessageQueue[data.from] = [];\n      // Send the spears to the new player\n      this.network.peerMessageQueue[data.from].push({\n        type: Const.PeerJsMsgType.SYNC_SPEARS,\n        data: {\n          spears: this._spearGroup.getChildren().map(s => {\n            const spear = s as Spear;\n            return {\n              id: spear.id,\n              rotation: spear._angle,\n              x: Math.round(spear.x),\n              y: Math.round(spear.y)\n            };\n          })\n        }\n      });\n    }\n  }\n\n  _handlePlayerUpdate(remotePlayer, data) {\n    var body = remotePlayer.body;\n    remotePlayer.rotation = data.rotation;\n    remotePlayer.currentState = data.state;\n    remotePlayer.x = data.x;\n    remotePlayer.y = data.y;\n    remotePlayer.hasSpear = data.hasSpear;\n    body.velocity.x = data.vx;\n    body.velocity.y = data.vy;\n  }\n\n  _handleBlockBump(data) {\n    this.blocksGroup.getAt(data.idx).bump();\n  }\n\n  _handleItemBlockBump(data) {\n    this.itemBlocksGroup.getAt(data.idx).bump();\n  }\n  _handleSpearCreated(data) {\n    const spear = new Spear(this.scene, data.x, data.y, data.id, data.rotation);\n    spear.setup(this.scene, this._spearGroup);\n  }\n  _handleSyncSpears(data) {\n    for (const s of data.spears) {\n      const spear = new Spear(this.scene, s.x, s.y, s.id, s.rotation);\n      spear.setup(this.scene, this._spearGroup);\n    }\n  }\n  _handleSpearPickedUp(data) {\n    _.forEach(this._spearGroup.getChildren(), spear => {\n      if (spear && spear.id === data.id) {\n        spear.destroy();\n      }\n    });\n  }\n  _handleMonstersUpdate(data) {\n    const { monsters } = data;\n    const myMonsters = this._monsterGroup.getChildren() as Monster[];\n    for (const monster of monsters) {\n      const potentialMonster: Monster | undefined = myMonsters.find(m => m.id === monster.id);\n      if (potentialMonster) {\n        potentialMonster.rotation = monster.rotation;\n        potentialMonster.x = monster.x;\n        potentialMonster.y = monster.y;\n        potentialMonster.body.velocity.x = monster.vx;\n        potentialMonster.body.velocity.y = monster.vy;\n      } else {\n        const m = new Monster(this.scene, monster.x, monster.y, monster.id);\n        m.setup(this.scene, this.createLaser);\n        m.rotation = monster.rotation;\n        m.body.velocity.x = monster.vx;\n        m.body.velocity.y = monster.vy;\n        m._numRand = monster.numRand;\n        m._numUpdates = monster.numUpdates;\n        m.catchUp();\n        this._monsterGroup.add(m);\n      }\n    }\n  }\n  _handlePlayerDead(remotePlayer) {\n    _.forEach(this.remotePlayers.getChildren(), player => {\n      if (player && player.id === remotePlayer.id) {\n        player.destroy();\n      }\n    });\n  }\n  _handleDeadMonster(data) {\n    _.forEach(this._monsterGroup.getChildren(), monster => {\n      if (monster && monster.id === data.id) {\n        monster.destroy();\n      }\n    });\n  }\n  _handleDoor(open) {\n    if (this.arena) {\n      for (const d of this.arena.doors) {\n        d.open();\n      }\n    }\n  }\n}\n","import React, { useRef, useEffect, useState } from \"react\";\nimport Phaser from \"phaser\";\nimport logoImg from \"../../imgs/img.jpg\";\nimport spearImg from \"../../imgs/spear_gray.png\";\nimport malwareImg from \"../../imgs/malware_gladiator.png\";\nimport avastImg from \"../../imgs/avast_logo_light.png\";\nimport LevelManager from \"./levelManager\";\n\nimport './Game.scss';\n\nclass MyScene extends Phaser.Scene {\n  manager: LevelManager | undefined;\n  constructor() {\n    super(\"MyScene\");\n  }\n  preload() {\n    this.load.image(\"logo\", logoImg);\n    this.load.image(\"spear\", spearImg);\n    this.load.image(\"avast\", avastImg);\n    this.load.image(\"malware\", malwareImg);\n    this.load.bitmapFont(\"plumber_bros\", \"res/fonts/plumber_bros_gray.png\", \"res/fonts/plumber_bros.xml\");\n    this.load.multiatlas('monster', 'res/monster.json', 'res');\n    this.load.multiatlas('player', 'res/player.json', 'res');\n  }\n\n  update() {\n    if (this.manager) {\n      this.manager.update();\n    }\n  }\n\n  create() {\n    // const logo = this.add.image(800, 600, \"logo\");\n    // this.tweens.add({\n    //   targets: logo,\n    //   y: 450,\n    //   duration: 2000,\n    //   ease: \"Power2\",\n    //   yoyo: true,\n    //   loop: -1\n    // });\n    this.cameras.main.setBackgroundColor(0xFFFFFF)\n    this.manager = new LevelManager(this.game, this);\n  }\n}\n\nconst Game = () => {\n  useEffect(() => {\n    let game;\n    console.log(window.innerWidth);\n    window.addEventListener('resize', () => {\n      game.scale.resize(window.innerWidth, window.innerHeight);\n    })\n    const config = {\n      type: Phaser.AUTO,\n      parent: \"phaser-example\",\n      width: 1920,\n      height: 1080,\n      scene: MyScene,\n      scale: {\n        mode: Phaser.Scale.NONE,\n      },\n      physics: {\n        default: \"arcade\",\n        arcade: {\n          debug: true,\n          fps: 60\n        }\n      }\n    };\n\n    game = new Phaser.Game(config);\n    game.scale.resize(window.innerWidth, window.innerHeight);\n    return () => {};\n  }, []);\n\n  return <div id=\"phaser-example\"></div>;\n};\n\nexport default Game;\n","import React from 'react';\nimport './theme.scss';\nimport { Game } from './components'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/img.a16fe9ef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spear_gray.4bf42d25.png\";","module.exports = __webpack_public_path__ + \"static/media/malware_gladiator.145329ec.png\";","module.exports = __webpack_public_path__ + \"static/media/avast_logo_light.e09ca6ab.png\";"],"sourceRoot":""}