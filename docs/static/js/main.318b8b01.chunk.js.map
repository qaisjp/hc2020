{"version":3,"sources":["components/Game/index.tsx","App.tsx","serviceWorker.ts","index.tsx","imgs/img.jpg"],"names":["preload","this","load","image","logoImg","create","logo","add","tweens","targets","y","duration","ease","yoyo","loop","Game","useEffect","game","window","addEventListener","scale","resize","innerWidth","innerHeight","config","type","Phaser","AUTO","parent","width","height","scene","mode","Scale","NONE","id","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"qMAIA,SAASA,IACPC,KAAKC,KAAKC,MAAM,OAAQC,KAG1B,SAASC,IACP,IAAMC,EAAOL,KAAKM,IAAIJ,MAAM,IAAK,IAAK,QAEtCF,KAAKO,OAAOD,IAAI,CACdE,QAASH,EACTI,EAAG,IACHC,SAAU,IACVC,KAAM,SACNC,MAAM,EACNC,MAAO,IAKX,IA8BeC,EA9BF,WA2BX,OA1BAC,qBAAU,WACR,IAAIC,EAEJC,OAAOC,iBAAiB,UAAU,WAChCF,EAAKG,MAAMC,OAAOH,OAAOI,WAAYJ,OAAOK,gBAG9C,IAAMC,EAAS,CACbC,KAAMC,IAAOC,KACbC,OAAQ,iBACRC,MAAO,KACPC,OAAQ,KACRC,MAAO,CACL/B,QAASA,EACTK,OAAQA,GAEVe,MAAO,CACLY,KAAMN,IAAOO,MAAMC,OAMvB,OAFAjB,EAAO,IAAIS,IAAOX,KAAKS,GAEhB,eACN,IAEI,yBAAKW,GAAG,oBCrCFC,EARO,WACpB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,oBE7InBC,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.318b8b01.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport Phaser from \"phaser\";\nimport logoImg from \"../../imgs/img.jpg\";\n\nfunction preload() {\n  this.load.image(\"logo\", logoImg);\n}\n\nfunction create() {\n  const logo = this.add.image(800, 600, \"logo\");\n\n  this.tweens.add({\n    targets: logo,\n    y: 450,\n    duration: 2000,\n    ease: \"Power2\",\n    yoyo: true,\n    loop: -1\n  });\n}\n\n\nconst Game = () => {\n  useEffect(() => {\n    let game;\n\n    window.addEventListener('resize', () => {\n      game.scale.resize(window.innerWidth, window.innerHeight);\n    })\n\n    const config = {\n      type: Phaser.AUTO,\n      parent: \"phaser-example\",\n      width: 1920,\n      height: 1080,\n      scene: {\n        preload: preload,\n        create: create\n      },\n      scale: {\n        mode: Phaser.Scale.NONE\n      }\n    };\n\n    game = new Phaser.Game(config);\n\n    return () => {};\n  }, [])\n\n  return <div id=\"phaser-example\"></div>;\n}\n\nexport default Game\n","import React from 'react';\nimport './theme.scss';\nimport { Game } from './components'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/img.a16fe9ef.jpg\";"],"sourceRoot":""}